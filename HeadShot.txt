#Library "HeadShot"
#Include "zcommon.acs"

Script "BDHeadShot" (int pointer)
{
	SetActivator(0, pointer);//Change activator to master (monster body)
	//Log(s:"Headshot Pointer bitfield ",i:ClassifyActor(0));

	If(ClassifyActor(0) & ACTOR_ALIVE)//Is the master (monster body) alive?
	{
		SetResultValue(1);
	}
	Else
	{
		SetResultValue(0);
	}
}

Script "BDHoldingBarrel" (int pointer)
{
	SetActivator(0, pointer);//Change activator to master (monster body)
	//Log(s:"Pointer bitfield ",i:ClassifyActor(0));

	If(CheckInventory("HasExplosiveBarrel") && (ClassifyActor(0) & ACTOR_ALIVE))//Is monster currently holding a barrel and alive?
	{
		SetResultValue(1);
	}
	Else
	{
		SetResultValue(0);
	}
}

Script "BDMeatShield" (int pointer)
{
	SetActivator(0, pointer);//Change activator to master (Player)
	//Log(s:"Meatshield Pointer Class ",s:GetActorClass(0));
	//Log(s:"Meatshield Pointer bitfield ",i:ClassifyActor(0));
	//Log(s:"Activator inventory ",i:CheckInventory("GotMeatShield"));

	If( (ClassifyActor(0) & ACTOR_ALIVE) && (CheckInventory("GotMeatShield")) )//Is the pointer alive and do they have a meatshield?
	{
		SetResultValue(1);
	}
	Else
	{
		SetResultValue(0);
	}
}

Script "BDAnimateTracks" (int pointer)
{
	bool isMoving = 0;
	int tankbasedirection = 0;

	SetActivator(0, pointer);//Change activator to master (PlayerTank)
	//Log(s:"Tracks Pointer Class ",s:GetActorClass(0));
	//Log(s:"Tracks Pointer bitfield ",i:ClassifyActor(0));
	//Log(s:"Tracks inventory BackPedal ",i:CheckInventory("BackPedal"));
	//Log(s:"Tracks inventory Accelerate ",i:CheckInventory("Accelerate"));
	//Log(s:"Tracks inventory TurnLeft ",i:CheckInventory("TurnLeft"));
	//Log(s:"Tracks inventory TurnRight ",i:CheckInventory("TurnRight"));

	tankbasedirection = GetUserVariable(0,"user_tankbasedirection");//get PlayerTank's basedirection
	//Log(s:"tankbasedirection ",i:tankbasedirection);

	SetUserVariable(262,"user_tracksDirection",tankbasedirection);//set Tracks to the PlayerTank's basedirection
	//Log(s:"tracksDirection ",i:GetUserVariable(262,"user_tracksDirection"));

	If(ClassifyActor(0) & ACTOR_ALIVE)//Is the master (PlayerTank) alive?
	{
		//Log(s:"Player is alive");
		//Log(s:"StrCmp PlayerTank? ",i:!StrCmp( GetActorClass(0), "PlayerTank" ));
		//Log(s:"StrCmp PlayerArtilleryTank? ",i:!StrCmp( GetActorClass(0), "PlayerArtilleryTank" ));
		If(!StrCmp( GetActorClass(0), "PlayerTank" ) || !StrCmp( GetActorClass(0), "PlayerArtilleryTank" ))//Is the player actually in a tank?
		{
			SetResultValue(1);
		}
		Else
		{
			SetResultValue(0);
		}
	}
	Else
	{
		SetResultValue(0);
	}

	If(CheckInventory("BackPedal") || CheckInventory("Accelerate") || CheckInventory("TurnLeft") || CheckInventory("TurnRight"))
	{
		isMoving = 1;
		//Log(s:"isMoving ",b:isMoving);
	}

	//Log(s:"MP40Ammo ",i:CheckActorInventory(262,"MP40Ammo"));
	Switch(CheckActorInventory(262,"MP40Ammo"))
	{
		Case 1:
		If(isMoving == 1)
		{
			SetActorState(262,"Moving",1);
		}
		Else
		{
			SetActorState(262,"Stationary",1);
		}
		Break;

		Default:
		Break;
	}

	//Log(s:"ShotgunAmmo ",i:CheckActorInventory(262,"ShotgunAmmo"));
	Switch(CheckActorInventory(262,"ShotgunAmmo"))
	{
		Case 3:
		If(isMoving == 1)
		{
			SetActorState(262,"PitchBackMoving",1);
		}
		Else
		{
			SetActorState(262,"PitchBack",1);
		}
		Break;

		Default:
		Break;
	}

	//Log(s:"PitchBackToken ",i:CheckActorInventory(262,"PitchBackToken"));
	Switch(CheckActorInventory(262,"PitchBackToken"))
	{
		Case 3:
		If(isMoving == 1)
		{
			SetActorState(262,"PitchFrontMoving",1);
		}
		Else
		{
			SetActorState(262,"PitchFront",1);
		}
		Break;

		Case 6:
		If(isMoving == 1)
		{
			SetActorState(262,"PitchFront2Moving",1);
		}
		Else
		{
			SetActorState(262,"PitchFront2",1);
		}
		Break;

		Default:
		Break;
	}

	//Log(s:"PitchFrontToken ",i:CheckActorInventory(262,"PitchFrontToken"));
	Switch(CheckActorInventory(262,"PitchFrontToken"))
	{
		Case 3:
		If(isMoving == 1)
		{
			SetActorState(262,"PitchBackMoving",1);
		}
		Else
		{
			SetActorState(262,"PitchBack",1);
		}
		Break;

		Case 6:
		If(isMoving == 1)
		{
			SetActorState(262,"PitchBack2Moving",1);
		}
		Else
		{
			SetActorState(262,"PitchBack2",1);
		}
		Break;

		Default:
		Break;
	}

	TakeActorInventory(262,"MP40Ammo",9);
	TakeActorInventory(262,"ShotgunAmmo",9);
	TakeActorInventory(262,"PitchBackToken",9);
	TakeActorInventory(262,"PitchFrontToken",9);
}